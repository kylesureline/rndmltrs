{"version":3,"sources":["reducers/reducer.js","components/Form.jsx","reducers/actions.js","components/Table.jsx","App.js","serviceWorker.js","index.js"],"names":["values","split","table","Array","map","_","i","value","Math","floor","random","length","className","ceil","initialState","allowUppercase","fonts","one","two","three","four","reducer","state","action","type","word","font","Form","dispatch","useState","setValue","handleFont","str","onSubmit","e","preventDefault","onChange","target","checked","Table","row","col","index","key","App","useReducer","onClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0603a8ff.chunk.js","sourcesContent":["const values = 'abcdefghijklmnopqrstuvwxyz'.split('');\nconst table = [...Array(10)].map((_, i) => ([...Array(10)].map((_, i) => ({\n  value: values[Math.floor(Math.random() * values.length)],\n  className: `font-${Math.ceil(Math.random() * 4)}`\n}))));\n\nexport const initialState = {\n  values,\n  allowUppercase: true,\n  fonts: {\n    one: true,\n    two: true,\n    three: true,\n    four: true,\n  },\n  table,\n};\n\nexport const reducer = (state = initialState, action) => {\n  switch(action.type) {\n    case 'ADD_WORD':\n      return {\n        ...state,\n        values: [...state.values, action.word],\n      };\n    case 'CLEAR_WORDS':\n      return {\n        ...state,\n        values: [],\n      };\n    case 'CHANGE_FONTS':\n      return {\n        ...state,\n        fonts: {\n          ...state.fonts,\n          [action.font]: !state.fonts[action.font]\n        }\n      };\n    case 'TOGGLE_UPPERCASE':\n      return {\n        ...state,\n        allowUppercase: !state.allowUppercase\n      };\n    // case 'GENERATE':\n    //   return {\n    //     ...state,\n    //     table: generateTable()\n    //   }\n    default:\n      return state;\n  }\n};\n","import React, { useState } from 'react';\nimport {\n  ADD_WORD,\n  CHANGE_FONTS,\n  TOGGLE_UPPERCASE\n} from '../reducers/actions';\n\nconst Form = ({ state, dispatch }) => {\n  const [value, setValue] = useState('');\n  const { values, fonts, allowUppercase } = state;\n\n  const handleChange = e => {\n    const { value } = e.target;\n    setValue(value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(ADD_WORD(value));\n    setValue('');\n  };\n\n  const handleFont = str => {\n    dispatch(CHANGE_FONTS(str));\n  };\n\n  const handleUppercase = e => {\n    dispatch(TOGGLE_UPPERCASE());\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={value} onChange={handleChange} />\n      {!!values.length && <p>{values.map(value => `${value} `)}</p>}\n      <fieldset>\n        <label className=\"font-1\">\n          <input type=\"checkbox\" checked={fonts.one} onChange={() => handleFont('one')} />\n          Kalam\n        </label>\n        <label className=\"font-2\">\n          <input type=\"checkbox\" checked={fonts.two} onChange={() => handleFont('two')} />\n          Marck Script\n        </label>\n        <label className=\"font-3\">\n          <input type=\"checkbox\" checked={fonts.three} onChange={() => handleFont('three')} />\n          Source Sans Pro\n        </label>\n        <label className=\"font-4\">\n          <input type=\"checkbox\" checked={fonts.four} onChange={() => handleFont('four')} />\n          Playfair Display\n        </label>\n      </fieldset>\n      <fieldset>\n        <label className=\"font-4\">\n          <input type=\"checkbox\" checked={allowUppercase} onChange={handleUppercase} />\n          Allow uppercase\n        </label>\n      </fieldset>\n    </form>\n  );\n};\n\nexport default Form;\n","export const ADD_WORD = word => ({\n  type: 'ADD_WORD',\n  word,\n});\n\nexport const CLEAR_WORDS = () => ({\n  type: 'CLEAR_WORDS',\n});\n\nexport const CHANGE_FONTS = font => ({\n  type: 'CHANGE_FONTS',\n  font,\n});\n\nexport const TOGGLE_UPPERCASE = () => ({\n  type: 'TOGGLE_UPPERCASE',\n});\n","import React from 'react';\n\nconst Table = ({ table }) => {\n  return (\n    <div className=\"table\">\n      {table.map(row => (\n        row.map((col, index) => <div key={index} className={col.className}>{col.value}</div>)\n      ))}\n    </div>\n  );\n};\n\nexport default Table;\n","import React, { useReducer } from 'react';\nimport { initialState, reducer } from './reducers/reducer';\nimport Form from './components/Form';\nimport Table from './components/Table';\nimport {\n  CLEAR_WORDS,\n} from './reducers/actions';\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const handleClear = e => {\n    dispatch(CLEAR_WORDS());\n  };\n\n  const handleGenerate = e => {\n\n  };\n\n  return (\n    <div>\n      <Form state={state} dispatch={dispatch} />\n      {!!state.values.length && <button onClick={handleClear}>Clear</button>}\n      {!!state.values.length && <button onClick={handleGenerate}>Generate</button>}\n      <Table table={state.table} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'normalize.css/normalize.css';\nimport './styles/styles.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}