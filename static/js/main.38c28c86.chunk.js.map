{"version":3,"sources":["reducers/actions.js","reducers/reducer.js","App.js","components/Form.jsx","components/Table.jsx","serviceWorker.js","index.js"],"names":["ADD_WORD","word","type","CLEAR_WORDS","CHANGE_FONTS","font","TOGGLE_UPPERCASE","GENERATE","SET_FONT_SIZE","fontSize","generateTable","fonts","values","allowUppercase","Array","map","_","rowIndex","colIndex","value","Math","floor","random","length","slice","toUpperCase","className","split","initialState","table","reducer","state","action","includes","filter","App","useReducer","dispatch","onClick","e","disabled","global","print","Form","useState","setValue","onSubmit","preventDefault","onChange","target","join","index","key","checked","num","min","max","Table","style","row","col","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.38c28c86.chunk.js","sourcesContent":["export const ADD_WORD = word => ({\n  type: 'ADD_WORD',\n  word,\n});\n\nexport const CLEAR_WORDS = () => ({\n  type: 'CLEAR_WORDS',\n});\n\nexport const CHANGE_FONTS = font => ({\n  type: 'CHANGE_FONTS',\n  font,\n});\n\nexport const TOGGLE_UPPERCASE = () => ({\n  type: 'TOGGLE_UPPERCASE',\n});\n\nexport const GENERATE = () => ({\n  type: 'GENERATE',\n});\n\nexport const SET_FONT_SIZE = fontSize => ({\n  type: 'SET_FONT_SIZE',\n  fontSize,\n});\n","const generateTable = (fonts, values, allowUppercase) => {\n  return [...Array(10)].map((_, rowIndex) => {\n    return [...Array(10)].map((_, colIndex) => {\n      let value = values[Math.floor(Math.random() * values.length)];\n      if(allowUppercase) {\n        value = Math.random() > .5 ? `${value.slice(0, 1).toUpperCase()}${value.slice(1)}` : value;\n      }\n      const font = fonts[Math.floor(Math.random() * fonts.length)];\n      return {\n        value,\n        className: `font-${font}`\n      };\n    })\n  })\n};\n\nconst values = 'abcdefghijklmnopqrstuvwxyz'.split('');\nconst allowUppercase = true;\nconst fonts = [1, 2, 3, 4];\nconst table = generateTable(fonts, values, allowUppercase);\n\nexport const initialState = {\n  values,\n  allowUppercase,\n  fonts,\n  table,\n  fontSize: 32,\n};\n\nexport const reducer = (state = initialState, action) => {\n  switch(action.type) {\n    case 'ADD_WORD':\n      return {\n        ...state,\n        values: [...state.values, ...action.word.split(' ')],\n      };\n    case 'CLEAR_WORDS':\n      return {\n        ...state,\n        values: [],\n      };\n    case 'CHANGE_FONTS':\n      return {\n        ...state,\n        fonts: state.fonts.includes(action.font) ? (\n          // if it's already there, remove it\n          state.fonts.filter(font => font !== action.font)\n        ) : (\n          // if it's not there, add it\n          [...state.fonts, action.font]\n        )\n      };\n    case 'TOGGLE_UPPERCASE':\n      return {\n        ...state,\n        allowUppercase: !state.allowUppercase\n      };\n    case 'GENERATE':\n      return {\n        ...state,\n        table: generateTable(state.fonts, state.values, state.allowUppercase)\n      };\n    case 'SET_FONT_SIZE':\n      return {\n        ...state,\n        fontSize: action.fontSize\n      };\n    case 'MAKE_FONT_SMALLER':\n      return {\n        ...state,\n        fontSize: state.fontSize - 1 >= 12 ? state.fontSize - 1 : state.fontSize\n      };\n    case 'MAKE_FONT_LARGER':\n      return {\n        ...state,\n        fontSize: state.fontSize + 1 <= 72 ? state.fontSize + 1 : state.fontSize\n      };\n    default:\n      return state;\n  }\n};\n","import React, { useReducer } from 'react';\nimport { initialState, reducer } from './reducers/reducer';\nimport Form from './components/Form';\nimport Table from './components/Table';\nimport {\n  GENERATE,\n} from './reducers/actions';\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const handleGenerate = e => {\n    dispatch(GENERATE());\n  };\n\n  return (\n    <div>\n      <Form state={state} dispatch={dispatch} />\n      <button onClick={handleGenerate} disabled={!state.values.length}>Generate</button>\n      <button onClick={() => global.print()}>Print</button>\n      <Table table={state.table} fontSize={state.fontSize} />\n    </div>\n  );\n};\n\nexport default App;\n","import React, { useState } from 'react';\nimport {\n  ADD_WORD,\n  CHANGE_FONTS,\n  TOGGLE_UPPERCASE,\n  CLEAR_WORDS,\n  SET_FONT_SIZE,\n} from '../reducers/actions';\n\nconst Form = ({ state, dispatch }) => {\n  const [value, setValue] = useState('');\n  const { values, fonts, allowUppercase, fontSize } = state;\n\n  const handleChange = e => {\n    const { value } = e.target;\n    setValue(value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(ADD_WORD(value));\n    setValue('');\n  };\n\n  const handleFont = num => {\n    dispatch(CHANGE_FONTS(num));\n  };\n\n  const handleUppercase = e => {\n    dispatch(TOGGLE_UPPERCASE());\n  };\n\n  const handleClear = e => {\n    dispatch(CLEAR_WORDS());\n  };\n\n  const handleFontSize = e => {\n    const { value } = e.target;\n    dispatch(SET_FONT_SIZE(value));\n  };\n\n  return (\n    <div className=\"form\">\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" value={value} onChange={handleChange}/>\n      </form>\n      {!!values.length && (\n        <div>\n          <span>{values.join(', ')}<button onClick={handleClear}>Clear</button></span>\n        </div>\n      )}\n      <div>\n        {['Kalam', 'Marck Script', 'Source Sans Pro', 'Playfair Display'].map((font, index) => {\n          return (\n            <span key={index} className={`font-${index + 1}`}>\n              <input type=\"checkbox\" checked={fonts.includes(index + 1)} onChange={() => handleFont(index + 1)} />\n              {font}\n            </span>\n          );\n        })}\n      </div>\n      <div>\n        <span>\n          <input type=\"checkbox\" checked={allowUppercase} onChange={handleUppercase} />\n          Allow uppercase\n        </span>\n      </div>\n      <div>\n        <input type=\"range\" value={fontSize} min={24} max={128} onChange={handleFontSize} />\n      </div>\n    </div>\n  );\n};\n\nexport default Form;\n","import React from 'react';\n\nconst Table = ({ table, fontSize }) => {\n  return (\n    <div className=\"table\" style={{fontSize: `${fontSize}px`}}>\n      {table.map(row => (\n        row.map((col, index) => <div key={index} className={col.className}>{col.value}</div>)\n      ))}\n    </div>\n  );\n};\n\nexport default Table;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'normalize.css/normalize.css';\nimport './styles/styles.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}